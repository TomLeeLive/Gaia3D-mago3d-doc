version: "3.9"

name: mago3d

x-logging-fluentd: &logging-fluentd
  fluentd-address: localhost:24224
  fluentd-async: "true"

x-env: &env
  SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}

services:
  fluentd:
    environment:
      - FLUENTD_OPENSEARCH_HOSTS=opensearch-node:9200
    ports:
      - "24224:24224"
      - "24224:24224/udp"
      - "24231:24231"

  prometheus:
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`${DOMAIN}`) && PathPrefix(`/prometheus`)
      - traefik.http.routers.prometheus.entrypoints=websecure
      - traefik.http.routers.prometheus.service=prometheus
      - traefik.http.routers.prometheus.middlewares=prometheus-stripprefix
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
      - traefik.http.middlewares.prometheus-stripprefix.stripPrefix.prefixes=/prometheus

  grafana:
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`${DOMAIN}`) && PathPrefix(`/grafana`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.service=grafana
      - traefik.http.services.grafana.loadbalancer.server.port=3000

  configrepo:
    labels:
      - traefik.enable=true
      - traefik.http.routers.configrepo.rule=Host(`${DOMAIN}`) && PathPrefix(`/configrepo`)
      - traefik.http.routers.configrepo.entrypoints=websecure
      - traefik.http.routers.configrepo.service=configrepo
      - traefik.http.routers.configrepo.middlewares=configrepo-stripprefix
      - traefik.http.services.configrepo.loadbalancer.server.port=3000
      - traefik.http.middlewares.configrepo-stripprefix.stripPrefix.prefixes=/configrepo

  configserver:
    labels:
      - traefik.enable=true
      - traefik.http.routers.configserver.rule=Host(`${DOMAIN}`) && PathPrefix(`/configserver`)
      - traefik.http.routers.configserver.entrypoints=websecure
      - traefik.http.routers.configserver.service=configserver
      - traefik.http.routers.configserver.middlewares=configserver-stripprefix
      - traefik.http.services.configserver.loadbalancer.server.port=8888
      - traefik.http.middlewares.configserver-stripprefix.stripPrefix.prefixes=/configserver
    depends_on:
      configrepo:
        condition: service_healthy
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.configserver

  healthcheck:
    depends_on:
      - configserver

  postgresql:
    environment:
      - TZ=Asia/Seoul
      - POSTGRES_INITDB_ARGS=-k -E UTF8
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
    ports:
      - "5432:5432"

  geoserver:
    environment:
      - GEOSERVER_ADMIN_USER=${GEOSERVER_USER}
      - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_PASS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.geoserver.rule=Host(`${DOMAIN}`) && PathPrefix(`/geoserver`)
      - traefik.http.routers.geoserver.entrypoints=websecure
      - traefik.http.routers.geoserver.service=geoserver
      - traefik.http.services.geoserver.loadbalancer.sticky.cookie=true
      - traefik.http.services.geoserver.loadbalancer.server.port=8080
    depends_on:
      postgresql:
        condition: service_healthy

  keycloak:
    environment:
      - KC_DB_URL=jdbc:postgresql://postgresql/${POSTGRES_DB}
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASS}
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_RELATIVE_PATH=/auth
      - KEYCLOAK_ADMIN=${KEYCLOAK_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_PASS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak.rule=Host(`${DOMAIN}`) && PathPrefix(`/auth`)
      - traefik.http.routers.keycloak.entrypoints=websecure
      - traefik.http.routers.keycloak.service=keycloak
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
    depends_on:
      postgresql:
        condition: service_healthy

  opensearch-node:
    ports:
      - "9200:9200"
#    logging:
#      driver: fluentd
#      options:
#        <<: *logging-fluentd
#        tag: docker.opensearch-node

  opensearch-dashboard:
    labels:
      - traefik.enable=true
      - traefik.http.routers.opensearch-dashboard.rule=Host(`${DOMAIN}`) && PathPrefix(`/opensearch-dashboard`)
      - traefik.http.routers.opensearch-dashboard.entrypoints=websecure
      - traefik.http.routers.opensearch-dashboard.service=opensearch-dashboard
      - traefik.http.services.opensearch-dashboard.loadbalancer.server.port=5601
    depends_on:
      - opensearch-node
#    logging:
#      driver: fluentd
#      options:
#        <<: *logging-fluentd
#        tag: docker.opensearch-dashboard

  rabbitmq:
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.rabbitmq-console.rule=Host(`${DOMAIN}`) && PathPrefix(`/rabbitmq`)
      - traefik.http.routers.rabbitmq-console.entrypoints=websecure
      - traefik.http.routers.rabbitmq-console.service=rabbitmq-console
      - traefik.http.services.rabbitmq-console.loadbalancer.server.port=15672
    ports:
      - "5672:5672"
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.rabbitmq

  storage:
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASS}
    labels:
      - traefik.enable=true

      # MINIO API
      - traefik.http.routers.minio-api.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.minio-api.entrypoints=minio
      - traefik.http.routers.minio-api.service=minio-api
      - traefik.http.services.minio-api.loadbalancer.server.port=9000

      # MINIO Console
      - traefik.http.routers.minio-ui.rule=Host(`${DOMAIN}`) && PathPrefix(`/minio/console`)
      - traefik.http.routers.minio-ui.entrypoints=websecure
      - traefik.http.routers.minio-ui.service=minio-ui
      - traefik.http.routers.minio-ui.middlewares=minio-ui-trailingSlash,minio-ui-stripPrefix
      - traefik.http.services.minio-ui.loadbalancer.server.port=9090
      - traefik.http.middlewares.minio-ui-stripPrefix.stripprefix.prefixes=/minio/console
      - traefik.http.middlewares.minio-ui-trailingSlash.redirectRegex.regex=^(https?://[^/]+/[^/]+)$$
      - traefik.http.middlewares.minio-ui-trailingSlash.redirectRegex.replacement=$1/
      - traefik.http.middlewares.minio-ui-trailingSlash.redirectRegex.permanent=true

    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.minio

  traefik:
    command:
      - --global.checknewversion=false
      - --global.sendanonymoususage=false

      # Logging
      - --log.format=json
      - --log.level=INFO
      - --accesslog=true
      - --accesslog.format=json

      # Dashboard
      - --api.dashboard=true
      - --ping

      # Provider
      - --providers.file.directory=/etc/traefik/conf.d
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=mago3d

      # web entrypoint
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true

      # websecure entrypoint
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.certResolver=le

      # minio entrypoint
      - --entrypoints.minio.address=:9000
      - --entrypoints.minio.http.tls=true

    volumes:
      - ./traefik/certs:/etc/certs:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.middlewares=traefik-trailingSlash
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.middlewares.traefik-trailingSlash.redirectRegex.regex=^(https?://[^/]+/[^/]+)$$
      - traefik.http.middlewares.traefik-trailingSlash.redirectRegex.replacement=$1/
      - traefik.http.middlewares.traefik-trailingSlash.redirectRegex.permanent=true

    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.traefik

  gdal-converter:
    environment:
      <<: *env
    depends_on:
      healthcheck:
        condition: service_healthy

  f4d-converter:
    environment:
      <<: *env
    depends_on:
      healthcheck:
        condition: service_healthy

  t3d-converter:
    environment:
      <<: *env
    depends_on:
      healthcheck:
        condition: service_healthy

  terrain-converter:
    environment:
      <<: *env
    depends_on:
      healthcheck:
        condition: service_healthy

  dataset:
    environment:
      <<: *env
      SERVER_SERVLET_CONTEXT_PATH: /app/api/dataset
    labels:
      - traefik.enable=true
      - traefik.http.routers.dataset.rule=Host(`${DOMAIN}`) && PathPrefix(`/app/api/dataset`)
      - traefik.http.routers.dataset.entrypoints=websecure
      - traefik.http.routers.dataset.tls=true
      - traefik.http.routers.dataset.service=dataset
      - traefik.http.services.dataset.loadbalancer.server.port=8080
    depends_on:
      postgresql:
        condition: service_healthy
      healthcheck:
          condition: service_healthy


  userset:
    environment:
      <<: *env
      SERVER_SERVLET_CONTEXT_PATH: /app/api/userset
    labels:
      - traefik.enable=true
      - traefik.http.routers.userset.rule=Host(`${DOMAIN}`) && PathPrefix(`/app/api/userset`)
      - traefik.http.routers.userset.entrypoints=websecure
      - traefik.http.routers.userset.tls=true
      - traefik.http.routers.userset.service=userset
      - traefik.http.services.userset.loadbalancer.server.port=8080
    depends_on:
      postgresql:
        condition: service_healthy
      healthcheck:
        condition: service_healthy

  layerset:
    environment:
      <<: *env
      SERVER_SERVLET_CONTEXT_PATH: /app/api/layerset
    labels:
      - traefik.enable=true
      - traefik.http.routers.layerset.rule=Host(`${DOMAIN}`) && PathPrefix(`/app/api/layerset`)
      - traefik.http.routers.layerset.entrypoints=websecure
      - traefik.http.routers.layerset.tls=true
      - traefik.http.routers.layerset.service=layerset
      - traefik.http.services.layerset.loadbalancer.server.port=8080
    depends_on:
      postgresql:
        condition: service_healthy
      healthcheck:
        condition: service_healthy

  apidoc:
    labels:
      - traefik.enable=true
      - traefik.http.routers.apidoc.rule=Host(`${DOMAIN}`) && PathPrefix(`/doc`)
      - traefik.http.routers.apidoc.entrypoints=websecure
      - traefik.http.routers.apidoc.service=apidoc
      - traefik.http.services.apidoc.loadbalancer.server.port=80

  frontend:
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${DOMAIN}`) && (PathPrefix(`/user`) || PathPrefix(`/admin`))
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.service=frontend
      - traefik.http.services.frontend.loadbalancer.server.port=80
    depends_on:
      dataset:
        condition: service_started
      layerset:
        condition: service_started
      userset:
        condition: service_started